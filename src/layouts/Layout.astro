---
import "../styles/global.css";
import Header from "../components/Header.astro";
import Footer from "../components/Footer.astro";
import siteConfig from "../config/siteConfig.json";

interface Props {
  title?: string;
  description?: string;
  image?: string; // Social sharing images (e.g., "/og-image.jpg")
  url?: string; // Canonical tag and social sharing (defaults to current page)
  robots?: string; // e.g., "index, follow", "noindex, nofollow"
  contentType?: "website" | "article";
  publishedTime?: string; // ISO 8601 format (e.g., "2024-07-25T10:00:00-04:00")
  modifiedTime?: string; // ISO 8601 format
  author?: string; // Author's name or social media profile URL
  section?: string; // Category or section of the article (e.g., "Guides", "News")
  tags?: string[]; // Array of tags for the article
}

const {
  title = siteConfig.title,
  description = siteConfig.description,
  image = siteConfig.image, // TODO: A default image for social sharing
  author = siteConfig.author,
  url = Astro.url.href, // TODO: Canonical URL, defaults to the current page's URL (https://your-domain.com/your-page)
  robots = "index, follow",
  contentType = "website",
  publishedTime,
  modifiedTime,
  section,
  tags,
} = Astro.props;

// Construct full image URL if it's relative
const fullImageUrl = new URL(image, Astro.url.origin).href;
const GTM_ID = import.meta.env.PUBLIC_GTM_ID;
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="generator" content={Astro.generator} />

    {/* --- use https://realfavicongenerator.net/ and update /public  --- */}
    <link rel="icon" type="image/png" sizes="96x96" href="/favicon-96x96.png" />
    <link rel="shortcut icon" type="image/x-icon" href="/favicon.ico" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png" />
    <link rel="mask-icon" href="/safari-pinned-tab.svg" color="#5bbad5" />
    <link rel="manifest" href="/site.webmanifest" />
    <meta name="theme-color" content="#ffffff" />
    <meta name="msapplication-TileColor" content="#da532c" />
    <meta name="msapplication-TileImage" content="/mstile-144x144.png" />

    {/* --- Preconnect to key origins --- */}
    <link rel="preconnect" href="https://www.googletagmanager.com" />
    <link rel="preconnect" href="https://www.google-analytics.com" />

    {/* --- SEO Meta Tags --- */}
    <title>{title}</title>
    <meta name="description" content={description} />
    <link rel="canonical" href={url} />
    <meta name="robots" content={robots} />

    {/* --- Open Graph (for Facebook, LinkedIn, etc.) --- */}
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content={fullImageUrl} />
    <meta property="og:url" content={url} />
    <meta property="og:type" content={contentType} />
    <meta property="og:site_name" content={siteConfig.siteName} />

    {/* Article-specific Open Graph tags */}
    {
      contentType === "article" && (
        <>
          {publishedTime && (
            <meta property="article:published_time" content={publishedTime} />
          )}
          {modifiedTime && (
            <meta property="article:modified_time" content={modifiedTime} />
          )}
          {author && <meta property="article:author" content={author} />}
          {section && <meta property="article:section" content={section} />}
          {tags &&
            tags.map((tag) => <meta property="article:tag" content={tag} />)}
        </>
      )
    }

    {/* --- Twitter Card Tags --- */}
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content={title} />
    <meta name="twitter:description" content={description} />
    <meta name="twitter:image" content={fullImageUrl} />
    <meta name="twitter:site" content={siteConfig.twitterHandle} />
    <meta name="twitter:creator" content={siteConfig.twitterHandle} />

    {GTM_ID && (
      <script is:inline define:vars={{ GTM_ID }}>
        (function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
        new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
        j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
        'https://www.googletagmanager.com/gtm.js?id='+i+dl;j.type="text/partytown";f.parentNode.insertBefore(j,f);
        })(window,document,'script','dataLayer',GTM_ID);
      </script>
    )}

  </head>
  <body class="flex min-h-screen flex-col">
    {GTM_ID && (
      <noscript is:inline define:vars={{ GTM_ID }}>
        <iframe src={`https://www.googletagmanager.com/ns.html?id=${GTM_ID}`}
        height="0" width="0" style="display:none;visibility:hidden"></iframe>
      </noscript>
    )}
    
    <Header />
    <slot />
    <Footer />
  </body>
</html>
